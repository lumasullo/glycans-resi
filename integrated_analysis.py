#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Oct 18 17:41:10 2024

@author: masullo
"""

import numpy as np
import glob
import os
import pandas as pd
import matplotlib.pyplot as plt
import configparser
from timeit import default_timer as timer

from sklearn.neighbors import NearestNeighbors
from scipy.spatial.distance import pdist


abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
os.chdir(dname)

from Functions import io
from Functions import dbscan

plt.close('all')

"""
===============================================================================
Load experimental data
===============================================================================
"""

# 240617_HMEC ManNAz
path = r'/Volumes/pool-miblab/users/masullo/z_raw/GlycoRESI/240617_HMEC/RESI_ManNAz/workflow_analysis/00_cluster_241009-1223/00_cluster_aggregation_241009-1223/04_save_datasets_aggregated/'
filename = r'target_picked.hdf5'

# filepath = path + filename

px = 130

# create subfolder for results

results_path = os.path.join(os.path.dirname(filepath), 'integrated_results/')
try:
    os.mkdir(results_path)

except OSError:
    pass

# filepath = path + filename 
df_exp = pd.read_hdf(filepath, key = 'locs')

N = df_exp.shape[0] # total number of sugars
print('Total number of sugars:', N)

# N_sim = int(1e6) # this parameter controls the resolution of the simulation
N_sim = 50000

"""
===============================================================================
Simulation of CSR data
===============================================================================
"""

picked_area = io.extract_total_picked_area(filepath.replace('.hdf5', f'.yaml'))
picked_area = np.around(picked_area, 4)

if picked_area is not None:
    print(f"Total Picked Area (um^2): {picked_area}")
else:
    print("The 'Total Picked Area (Î¼m^2)' parameter was not found.")

obs_density = N / picked_area

w = np.sqrt(N_sim/obs_density) 
h = w

# simple CSR model
pos_sim = np.array([np.random.uniform(0, w, N_sim), 
                    np.random.uniform(0, h, N_sim)]).T

pos_sim = pos_sim * 1e3 # in nm

# =============================================================================
# save positions of the simulated molecules as a Picasso compatible file
# =============================================================================

filename_csr = 'simulated_CSR_'

width = w/px
height = h/px

info_csr = {}
info_csr["Generated by"] = "CSR simulation to compare with glycans data"
info_csr["Width"] = width # pixel 
info_csr["Height"] = height # pixel
info_csr["Pixelsize"] = px # in nm

io.save_pos(results_path, filename_csr, width, height, pos_sim/px, [info_csr])

df_sim = pd.read_hdf(results_path + filename_csr + '.hdf5', key = 'locs')

"""
===============================================================================
Analysis pipeline
===============================================================================
"""

# apply the same analysis to the experimental and the simulated dataset
for i, df in enumerate([df_exp, df_sim]):
    
    print(i)
    # print(df)


    """
    ===============================================================================
    Parameters for DBSCAN
    ===============================================================================
    """
    
    epsilon_nm = 10
    epsilon_px = epsilon_nm/px
    minpts = 1
    
    """
    ===============================================================================
    DBSCAN
    ===============================================================================
    """
    # Info to be added to dbscan yaml filename
    # info_db = {
    #     'Generated by': 'DBSCAN',
    #     'epsilon': epsilon_px,
    #     'minpts': minpts
    #     }
    
    db_clusters = dbscan.dbscan_f(df, epsilon_px, minpts)
    
    info = io.load_info(filepath.replace('.hdf5', f'.yaml'))
    
    # save locs in dbscan cluster with colorcoding = protein ID
    dbscan_filename = '%s_dbscan_%s_%d.hdf5' % (filename.replace('.hdf5', ''), str(epsilon_nm), minpts)
    io.save_locs(results_path + dbscan_filename, db_clusters, info)
    
    
    """
    ===============================================================================
    Analysis on each cluster (sugar counts, max distance, etc)
    ===============================================================================
    """
    
    nclusters = db_clusters['group'].max()
    
    cluster_size = []
    maxdist_list = []
    
    for j in range(nclusters):
        
        cluster = db_clusters[db_clusters['group'] == j]
        
        sugars = np.array([cluster['x'], 
                           cluster['y']])
                    
        nsugars = (sugars.shape[1])
        
        cluster_size.append(nsugars)
        
        if nsugars > 2:
        
            pairwise_distances = pdist(sugars.T)
            maxdist = np.max(pairwise_distances)
            
            maxdist_list.append(maxdist)
    
    """
    ===============================================================================
    0. Sugar count per cluster
    ===============================================================================
    """
    
    nbins_0 = np.arange(0, 15, 1)
    
    counts0, binedges0 = np.histogram(cluster_size, bins=nbins_0, density=True)
    
    # bin_centers0 = (bin_edges0[:-1] + bin_edges0[1:])/2
    
    if i == 0:
        fig_0, ax_0 = plt.subplots(figsize=(6,5))
    
        ax_0.bar(binedges0[:-1], counts0, edgecolor='black', linewidth=0.2, 
                    width=0.4, alpha=0.8, color='#2880C4', label='Data')
        
        df_save = pd.DataFrame({'counts': np.append(counts0, np.nan), 
                                'binedges': binedges0}) 
        df_save.to_csv(results_path + 'nsugars.csv', index=False)

        
    elif i == 1:
        
        ax_0.scatter(binedges0[2:-1], counts0[2:], edgecolor='black', 
                     linewidth=1, facecolor='None', label='CSR')
        
        df_save = pd.DataFrame({'counts': np.append(counts0, np.nan), 
                                'binedges': binedges0}) 
        df_save.to_csv(results_path + 'nsugars_CSR.csv', index=False)
        
        ax_0.set_xlabel('Sugars per cluster')
        ax_0.set_ylabel('Counts')
        
        ax_0.set_xlim(1.5, 15)
        ax_0.set_ylim(0, counts0[2:].max() * 1.1)
        
        ax_0.legend()
        
    
    print('Number of clustered sugars:', np.array(cluster_size).sum())
    
    
    """
    ===============================================================================
    1. Analysis of max dist within a cluster
    ===============================================================================
    """
    
    maxdist_list = np.array(maxdist_list) * px
    
    nbins_1 = np.arange(0, 100, 1)
    
    if i == 0:
        
        fig_1, ax_1 = plt.subplots(figsize=(5,5))
    
        counts1, binedges1, _ = ax_1.hist(maxdist_list, bins=nbins_1, density=True, alpha=0.5, 
                                          label='Data')
        
        df_save = pd.DataFrame({'counts': np.append(counts1, np.nan), 
                                'binedges': binedges1}) 
        df_save.to_csv(results_path + 'maxdist.csv', index=False)
        
    elif i == 1:
        
        counts1, bin_edges1 = np.histogram(maxdist_list, bins=nbins_1, 
                                           density=True)
        
        df_save = pd.DataFrame({'counts': np.append(counts1, np.nan), 
                                'binedges': binedges1}) 
        df_save.to_csv(results_path + 'maxdist_CSR.csv', index=False)
        
        ax_1.plot(bin_edges1[:-1], counts1[:], color='black', 
                  linewidth=1, label='CSR')
        
        ax_1.set_xlabel('Max. distance within a cluster')
        ax_1.set_ylabel('Counts')
        
        ax_1.legend()

    
    
    """
    ===============================================================================
    2. NND calculation for experimental data
    ===============================================================================
    """
    
    # parameters for the NND analysis
    binsize = 1
    maxdist = 1000
    
    fsize = (10, 10)
    msize = 50
    
    x_0 = df.x * px # in nm
    y_0 = df.y * px # in nm
    
    pos_exp_0 = np.array([x_0, y_0]).T
    
    # find nearest neighbours from biomolecule 0 to biomolecule 1 (exp data), in this case is the same biomolecule (e.g. ManNAz, GalNAz)
    nbrs = NearestNeighbors(n_neighbors=5).fit(pos_exp_0) 
    _distances_exp, _indices_exp = nbrs.kneighbors(pos_exp_0) # get distances and indices
    
    distances_exp = {}
    freqs_exp = {}
    bin_centers_exp = {}
    
    for j in range(4):
        
        key = str(j+1) + 'nn'
        distances_exp[key] = _distances_exp[:, j+1] # get the first neighbour distances (0 for hetero, 1 for homo in the second coord)
    
        bins = np.arange(0, maxdist, binsize)
        freqs_exp[key], binedges = np.histogram(distances_exp[key], bins=bins, 
                                                density=True)
            
        bin_centers_exp[key] = (binedges[:-1] + binedges[1:])/2
    
    if i == 0:
        
        for j in range(4):
            
            key = str(j+1) + 'nn'
            freqs_exp[key] = np.append(freqs_exp[key], np.nan)
        
        df_save = pd.DataFrame(freqs_exp)
        df_save['binedges'] = binedges
        
        df_save.to_csv(results_path + 'nnds.csv', index=False)
        
    if i == 1:
        
        for j in range(4):
            
            key = str(j+1) + 'nn'
            freqs_exp[key] = np.append(freqs_exp[key], np.nan)
        
        df_save = pd.DataFrame(freqs_exp)
        df_save['binedges'] = binedges
        
        df_save.to_csv(results_path + 'nnds_csr.csv', index=False)

    # =============================================================================
    # Plot of experimental NNDs
    # =============================================================================
    
    colors = ['#2880C4', '#97D8C4', '#F4B942', '#363636']
    
    if i == 0:
    
        fig_2, ax_2 = plt.subplots(figsize=(5,5))
        
        ax_2.set_xlim(0, 100)
        ax_2.set_ylim(0, np.nanmax(freqs_exp['1nn']) * 1.1)
        
        ax_2.set_xlabel('K-th NND (nm)')
        ax_2.set_ylabel('Counts')
        
        ax_2.set_box_aspect(1)
        
        binsize_exp = 0.5
        bins_exp = np.arange(0, maxdist, binsize_exp)
        
        for j in range(4):
            
            key = str(j+1) + 'nn'
        
            counts, bin_edges, _ = ax_2.hist(distances_exp[key], bins=bins_exp, 
                                             edgecolor='black', linewidth=0.1, 
                                             alpha=0.5, density=True, 
                                             color=colors[j], label=key)
        
    elif i == 1:
        
        for j in range(4):
            
            key = str(j+1) + 'nn'
        
            counts, binedges = np.histogram(distances_exp[key], 
                                            bins=bins_exp, density=True)
                                                
            ax_2.plot(binedges[:-1], counts, color=colors[j])
            

fig_0.savefig(results_path + 'nsugars.pdf', format='pdf')
fig_1.savefig(results_path + 'maxdists.pdf', format='pdf')
fig_2.savefig(results_path + 'nnds.pdf', format='pdf')



            
            

    