#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct  9 10:43:29 2024

@author: masullo
"""

import numpy as np
import glob
import os
import pandas as pd
import matplotlib.pyplot as plt
import configparser
from timeit import default_timer as timer

from scipy.spatial.distance import pdist


abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
os.chdir(dname)

from Functions import io
from Functions import dbscan

plt.close('all')

"""
===============================================================================
Input File
===============================================================================
"""

# 240617_HMEC ManNAz
path = r'/Volumes/pool-miblab/users/masullo/z_raw/GlycoRESI/240617_HMEC/RESI_ManNAz/workflow_analysis/00_cluster_241009-1223/00_cluster_aggregation_241009-1223/04_save_datasets_aggregated/'

# 240617_HMEC GalNAz
# path = r''

# 240618_HMEC ManNAz
# path = r'/Volumes/pool-miblab/users/masullo/z_raw/GlycoRESI/240618_HMEC/RESI_ManNAz/workflow_analysis/00_cluster_241007-1158/00_cluster_aggregation_241007-1158/04_save_datasets_aggregated/'

# 240618_HMEC GalNAz
# path = r'/Volumes/pool-miblab/users/masullo/z_raw/GlycoRESI/240618_HMEC/RESI_GalNAz/workflow_analysis/00_cluster_241007-1052/00_cluster_aggregation_241007-1052/04_save_datasets_aggregated/'

# 240819_MCF10A
# path = r'/Volumes/pool-miblab/users/masullo/z_raw/GlycoRESI/240819_MCF10A/ManNAz/workflow_analysis/00_cluster_241007-1108/00_cluster_aggregation_241007-1108/04_save_datasets_aggregated/'

# 240819_MCF10AT
# path = r'/Volumes/pool-miblab/users/masullo/z_raw/GlycoRESI/240819_MCF10AT/ManNAz/workflow_analysis/00_cluster_241007-1153/00_cluster_aggregation_241007-1153/04_save_datasets_aggregated/'

# 240820_MCF10A
# path = r'/Volumes/pool-miblab/users/masullo/z_raw/GlycoRESI/240820_MCF10A/ManNAz/workflow_analysis/00_cluster_241008-1552/00_cluster_aggregation_241008-1552/04_save_datasets_aggregated/'

# 240820_MCF10AT
# path = r''


filename = r'target_picked'

px = 130

# create subfolder for results
results_path = os.path.join(path, 'dbscan_results/')
try:
    os.mkdir(results_path)

except OSError:
    pass

"""
===============================================================================
Parameters for DBSCAN
===============================================================================
"""

epsilon_nm = 10
epsilon_px = epsilon_nm/px
minpts = 2

"""
===============================================================================
DBSCAN
===============================================================================
"""
# Info to be added to dbscan yaml filename
# info_db = {
#     'Generated by': 'DBSCAN',
#     'epsilon': epsilon_px,
#     'minpts': minpts
#     }

filepath = path + filename 
df = pd.read_hdf(filepath + '.hdf5', key = 'locs')

# t_dbscan_start = timer()
db_clusters = dbscan.dbscan_f(df, epsilon_px, minpts)
# t_dbscan_end = timer()

info = io.load_info(filepath + '.yaml')

# save locs in dbscan cluster with colorcoding = protein ID
dbscan_filename = '%s_dbscan_%s_%d.hdf5' % (filename, str(epsilon_nm), minpts)
io.save_locs(results_path + dbscan_filename, db_clusters, info)


"""
===============================================================================
Analysis on each cluster (protein counts, stoichiometry, etc)
===============================================================================
"""

nclusters = db_clusters['group'].max()

cluster_size = []
maxdist_list = []

for i in range(nclusters):
    
    cluster = db_clusters[db_clusters['group'] == i]
    
    sugars = np.array([cluster['x'], 
                       cluster['y']])
                
    nsugars = (sugars.shape[1])
    
    cluster_size.append(nsugars)
    
    if nsugars > 2:
    
        pairwise_distances = pdist(sugars.T)
        maxdist = np.max(pairwise_distances)
        
        maxdist_list.append(maxdist)
    

nbins = np.arange(0, 12, 1)
counts, bin_edges = np.histogram(cluster_size, bins=nbins, density=False)

bin_centers = (bin_edges[:-1] + bin_edges[1:])/2

fig_hist, ax_hist = plt.subplots()

ax_hist.bar(bin_edges[:-1] -0.2, counts, edgecolor='black', linewidth=0.2, 
            width=0.4, alpha=0.8, color='#00A7E1', label='Data')

print(np.array(cluster_size).sum())


### analysis of max dist within cluster

# nbins = np.arange(0, 100, 1)

maxdist_list = np.array(maxdist_list) * px

fig_hist_maxdist, ax_hist_maxdist = plt.subplots()

ax_hist_maxdist.hist(maxdist_list, bins=100, density=True, alpha=0.5)
# counts, bin_edges = np.histogram(maxdist_list, bins=nbins, density=False)

# bin_centers = (bin_edges[:-1] + bin_edges[1:])/2

# fig_hist_maxdist, ax_hist_maxdist = plt.subplots()

# ax_hist_maxdist.bar(bin_edges[:-1] -0.2, counts, edgecolor='black', linewidth=0.2, 
#                     width=0.4, alpha=0.8, color='#00A7E1', label='Data')

"""
===============================================================================
Generate CSR distribution
===============================================================================
"""

d = 80 # size of the area #TODO: read it from the .yaml file

N = df['x'].shape[0]

area = (d/2 * px)**2 * np.pi

w = int(np.sqrt(area))
h = w

pos = np.zeros((N, 2)) # initialize array of central positions for monomers
pos[:, 0], pos[:, 1] = [np.random.uniform(0, w, N), 
                        np.random.uniform(0, h, N)]

# =============================================================================
# save positions of the simulated molecules as a Picasso compatible file
# =============================================================================

filename_csr = 'simulated_CSR_' + str(w)

width = w/px
height = h/px

info_csr = {}
info_csr["Generated by"] = "CSR simulation to compare with glycans data"
info_csr["Width"] = width # pixel 
info_csr["Height"] = height # pixel
info_csr["Pixelsize"] = px # in nm

io.save_pos(results_path, filename_csr, width, height, pos/px, [info_csr])

"""
===============================================================================
DBSCAN for CSR
===============================================================================
"""

# Info to be added to dbscan yaml filename
# info_csr_db = {
#     'Generated by': 'DBSCAN',
#     'epsilon': epsilon_px,
#     'minpts': minpts
#     }

df_csr = pd.read_hdf(results_path + filename_csr + '.hdf5', key = 'locs')

# t_dbscan_start = timer()
db_clusters_csr = dbscan.dbscan_f(df_csr, epsilon_px, minpts)
# t_dbscan_end = timer()

info_csr = io.load_info(results_path + filename_csr + '.yaml')

# save locs in dbscan cluster with colorcoding = protein ID
dbscan_filename_csr = '%s_dbscan_%s_%d.hdf5' % (filename_csr, str(epsilon_nm), minpts)
io.save_locs(results_path + dbscan_filename_csr, db_clusters_csr, info_csr)

"""
===============================================================================
Analysis on each cluster (protein counts, stoichiometry, etc) for CSR
===============================================================================
"""

nclusters_csr = db_clusters_csr['group'].max()

cluster_size_csr = []
maxdist_list_csr = []

for i in range(nclusters_csr):
    
    cluster = db_clusters_csr[db_clusters_csr['group'] == i]
    
    sugars = np.array([cluster['x'], 
                       cluster['y']])
                
    nsugars = (sugars.shape[1])
    
    cluster_size_csr.append(nsugars)
    
    if nsugars > 2:
    
        pairwise_distances = pdist(sugars.T)
        maxdist = np.max(pairwise_distances)
        
        maxdist_list_csr.append(maxdist)
        
maxdist_list_csr = np.array(maxdist_list_csr) * px
# fig_hist_maxdist_csr, ax_hist_maxdist_csr = plt.subplots()
# ax_hist_maxdist.hist(maxdist_list_csr, bins=50, density=True, alpha=0.5)

nbins = np.arange(0, 12, 1)
counts_csr, bin_edges = np.histogram(cluster_size_csr, bins=nbins, density=False)

bin_centers = (bin_edges[:-1] + bin_edges[1:])/2

# fig_hist, ax_hist = plt.subplots()

ax_hist.bar(bin_edges[:-1] + 0.2, counts_csr, edgecolor='black', linewidth=0.2, 
            width=0.4, alpha=0.8, color='#ED7D3A', label='CSR simulation')

ax_hist.set_xlabel('Number of sugars per cluster') 
ax_hist.set_ylabel('Counts') 
ax_hist.tick_params(direction='in')

ax_hist.set_xlim(1.1, 10)


